#!/usr/bin/env python3
"""
Script de prueba para el extractor masivo
Ejecuta extracci√≥n con cantidades peque√±as para testing
"""
import asyncio
from massive_data_extractor import MassiveDataExtractor
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_extraction():
    """Probar extracci√≥n con cantidades peque√±as"""
    extractor = MassiveDataExtractor()
    
    try:
        await extractor.initialize()
        logger.info("üöÄ Iniciando prueba de extracci√≥n...")
        
        # Fase 1: TSE con 1000 c√©dulas
        logger.info("1Ô∏è‚É£ Probando extracci√≥n TSE (1K c√©dulas)")
        tse_count = await extractor.extract_tse_hybrid_data(
            cedula_batch_size=500,
            max_cedulas=1000
        )
        logger.info(f"‚úÖ TSE completado: {tse_count} registros")
        
        # Fase 2: Daticos
        logger.info("2Ô∏è‚É£ Probando extracci√≥n Daticos")
        daticos_count = await extractor.extract_daticos_massive_data(target_records=50000)
        logger.info(f"‚úÖ Daticos completado: {daticos_count} registros")
        
        # Fase 3: Mercantiles
        logger.info("3Ô∏è‚É£ Probando extracci√≥n mercantiles")
        mercantile_count = await extractor.extract_mercantile_data_enhanced()
        logger.info(f"‚úÖ Mercantiles completado: {mercantile_count} registros")
        
        # Estad√≠sticas
        logger.info(f"üìä RESULTADOS DE PRUEBA:")
        logger.info(f"   üó≥Ô∏è  TSE: {tse_count:,}")
        logger.info(f"   üèõÔ∏è  Daticos: {daticos_count:,}")
        logger.info(f"   üè¢ Mercantiles: {mercantile_count:,}")
        logger.info(f"   üì± Tel√©fonos: {extractor.extraction_stats['phone_numbers_found']:,}")
        logger.info(f"   üíº Total estimado para 2M: {(tse_count + daticos_count + mercantile_count) * 1000:,}")
        
        return {
            'tse': tse_count,
            'daticos': daticos_count,
            'mercantile': mercantile_count,
            'phones': extractor.extraction_stats['phone_numbers_found']
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error en prueba: {e}")
        import traceback
        traceback.print_exc()
        return None
    finally:
        await extractor.close()

if __name__ == "__main__":
    result = asyncio.run(test_extraction())
    print(f"\nüéØ Resultado final: {result}")